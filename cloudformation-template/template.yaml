AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters: 
  BucketExpiryDays:
    Type: String
    Default: ''
    AllowedPattern: ^[0-9]*$
    ConstraintDescription: Must be a number
    Description: Expiry time (in days) for events on S3 storage. The event details will be automatically removed from S3 after expiry. Leave empty for no expiration.
  BucketEncryptionAlgorithm:
    Type: String
    Default: ''
    AllowedValues: 
      - ''
      - AES256
      - aws:kms
    Description: Server-side encryption algorithm for your event S3 storage.
  BucketEncryptionKMSKey:
    Type: String
    Default: ''
    Description: The AWS:KMS Master key for S3 server-side encryption. Leave blank if not using AWS:KMS bucket encryption.
    AllowedPattern: ^$|^arn:aws:kms:.+:.+:.+
    ConstraintDescription: Must be an AWS KMS Key ARN (eg arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012)
  BucketPrefix:
    Type: String
    Default: archive
    Description: Storage prefix for S3 event storage
    MaxLength: 250
    MinLength: 1
  CorsOrigin:
    Type: String
    Default: "*"
    Description: Cross-origin resource sharing (CORS) restriction for the event submission Web Api. Restrict to a single web site domain to only allow submissions from that site, or leave as * for open submission. 
    MaxLength: 250
    MinLength: 1
  CloudWatchNameSpace: 
    Type: String
    Default: Desole
    Description: CloudWatch Metrics Namespace
    AllowedPattern: ^[0-9A-Za-z\._/-]+$
    MaxLength: 250
    MinLength: 1
    ConstraintDescription: 'Up to 250 characters. Possible characters are: alphanumeric characters (0-9A-Za-z), period (.), hyphen (-), underscore (_), forward slash (/), hash (#), and colon (:)'
Conditions:
    IsBucketExpiryDefined: !Not [ !Equals ['', !Ref BucketExpiryDays]]
    IsBucketEncryptionDefined: !Not [ !Equals ['', !Ref BucketEncryptionAlgorithm]]
Resources:
  CollectorApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: collector-api.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          TOPIC_ARN: !Ref CollectorTopic
      Policies:
      - SNSPublishMessagePolicy:
          TopicName: !Ref CollectorTopic
      Events:
        ApiEndpointApi:
          Type: Api
          Properties:
            Path: /desole
            Method: POST
            RestApiId: !Ref CollectorApiGateway
        PostSentry:
          Type: Api
          Properties:
            Path: /sentry
            Method: POST
            RestApiId: !Ref CollectorApiGateway
  CollectorTopic: 
    Type: AWS::SNS::Topic
  S3Publisher:
    Type: AWS::Serverless::Function
    Properties:
      Handler: s3-publisher.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          BUCKET_NAME: !Ref CollectedEventsStorage
          BUCKET_PREFIX: !Ref BucketPrefix
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref CollectedEventsStorage
      Events:
        CollectorSubscribedTopic:
          Type: SNS
          Properties:
            Topic: !Ref CollectorTopic
  CloudwatchPublisher:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cloudwatch-publisher.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          CLOUDWATCH_NAMESPACE: !Ref CloudWatchNameSpace
      Policies: 
      - CloudWatchPutMetricPolicy: {}
      Events:
        CollectorSubscribedTopic:
          Type: SNS
          Properties:
            Topic: !Ref CollectorTopic
  CollectedEventsStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        !If
          - IsBucketEncryptionDefined
          - 
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: !Ref BucketEncryptionAlgorithm
                  KMSMasterKeyID: !Ref BucketEncryptionKMSKey
          - !Ref AWS::NoValue
      LifecycleConfiguration:
        !If 
          - IsBucketExpiryDefined
          - Rules:
            - ExpirationInDays: !Ref BucketExpiryDays
              Prefix: !Ref BucketPrefix 
              Status: Enabled
          - !Ref AWS::NoValue
  CollectorApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: 'prod'
      Cors:
        AllowOrigin: !Join [ "", [ "'", !Ref CorsOrigin, "'" ] ]
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          /desole:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CollectorApi.Arn}/invocations
                responses: {}
Outputs:
  ApiUrl:
    Description: The URL of your API endpoint -- use this to configure the Desole client
    Value: !Sub "https://${CollectorApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${CollectorApiGateway.Stage}/desole"
  S3Bucket:
    Value: !Ref CollectedEventsStorage
    Description: S3 bucket where the events will be archived 
  CollectorSNSTopic:
    Value: !Ref CollectorTopic
    Description: SNS Collector Topic for custom integrations
